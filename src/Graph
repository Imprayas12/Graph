Graph is a non linear data structure
Graph can be represented as G = {v,e}
where v = vertex and e = edge.
Edge represents a relationship between 2 vertices.

    1 - 2  5
    | / | /
    3 - 4

can be termed as a graph.

Connected Graph - Each vertex is connected to at least one other vertex of graph. A connected graph is called
complete graph if every vertex is connected to every other vertex.

Disconnected Graph - There will exist at least one vertex in graph which won't be connected to any vertex.

                              Graph
                            /       \
                           /         \
                      Directed         Undirected
                      /     \            /    \
                     /       \          /      \
            Weighted   Unweighted     Weighted  Unweighted
                   /      \                /      \
                  /        \              /        \
             Positive   Negative     Positive      Negative


                 1 -> 2  5
                 |    | /
                 3 -> 4

            E = {(1,2),(1,3),(2,1),(2,4),(3,4),(3,1),(4,2),(4,5),(5,4)}

 Representation of the Graph Data Structure

 i.  Adjacency Matrix - Preferred to use when graph is complete or nearly complete.
 ii. Adjacency List - Preferred to use when graph is not complete.

 Difference between tree DS and Graph DS
 Tree  - This DS isn't cyclic.
 Graph - This DS is cyclic.
 Tree is a special representation of Acyclic graph.
                                             1,2,3,4,5,6
  1 - 2         Adjacency Matrix Rep :- {1: {0,1,1,0,0,0}}
  |   |                                 {2: {1,0,0,1,0,0}}
  3 - 4                                 {3: {1,0,0,1,1,0}}
  |                                     {4: {0,1,1,0,0,0}}
  5 - 6                                 {5: {0,0,1,0,0,1}}
                                        {6: {0,0,0,0,1,0}}
       O(1) - To check if any two vertices are connected.
       O(n) - To check the status of any one node.


DFS Traversal


   2 - 1         Source = 1
   |   |         1. Check if source is visited. If not then mark it visited.
   3 - 4         2. Go to last adjacent vertex.
   |             3. If not visited, Repeat the process.
   5 - 6         4. If already visited then RETURN.
